plugins {
	id "fabric-loom" version "0.2.5-SNAPSHOT"
	id "eclipse"
	id "maven-publish"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

repositories {
	mavenLocal()
//	maven {
//		name = "CurseForge"
//		url = "https://minecraft.curseforge.com/api/maven"
//	}
//	maven {
//		name = "GitHub"
//		url = "https://maven.pkg.github.com"
//	}
//	maven {
//		name = "JitPack"
//		url = "https://jitpack.io"
//	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def ENV = System.getenv()
version = version + (ENV.BUILD_NUMBER ? ("+build." + ENV.BUILD_NUMBER) : "")

minecraft {
	
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings "net.fabricmc:yarn:${yarn_mappings}"
	
	modApi "net.fabricmc:fabric-loader:${loader_version}"
	modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
	
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	
	modApi("io.github.prospector:modmenu:${modmenu_version}") {
		transitive = false
	}
}

sourceSets {
	data {
		compileClasspath += sourceSets.main.compileClasspath
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.output
	}
}

def dataDir = project.file("$buildDir/datadump/")
def dataCacheDir = new File(dataDir, "/.cache/")

task generateData(type: JavaExec) {
	doFirst {
		dataDir.mkdirs()
	}

	classpath = sourceSets.data.runtimeClasspath

	main = "com.fabriccommunity.spookytime.SpookyData"

	// arguments to pass to the application

	workingDir dataDir
	outputs.dir dataDir
	args dataDir.getAbsolutePath()
	
	doLast {
		dataCacheDir.delete()
	}
}

processResources {
	inputs.property "version", project.version
	
	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}
	
	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

eclipse {
	project {
		name = mod_name
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

jar {
	from(generateData.outputs.files) {
		include "/data/"
	}
	
	from "LICENSE"
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}"
		attributes "Built-On-Minecraft": "${project.minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	from(generateData.outputs.files) {
		include "/data/"
	}
	archiveClassifier.set "sources"
	from sourceSets.main.allSource
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName + "-sources"
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
		attributes "Built-On-Minecraft": "${project.minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
		}
	}
	
	repositories {
		mavenLocal()
	}
}

curseforge {
	if(project.hasProperty("curseforge_api_key")) {
		apiKey = project.properties.curseforge_api_key
	}
	
	if(project.hasProperty("curseforge_id")) {
		project {
			id = project.properties.curseforge_id
			
			releaseType = project.release_type
			addGameVersion project.release_version
			addGameVersion "Fabric"
			
			mainArtifact(remapJar) {
				displayName = "${mod_name}-${minecraft_version}-${project.version}.jar"
				relations {
					requiredDependency "fabric-api"
				}
			}
			
			addArtifact(sourcesJar) {
				displayName = "${mod_name}-${minecraft_version}-${project.version}-sources.jar"
			}
			
			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}
